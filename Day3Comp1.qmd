---
title: "Day3Comp"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(palmerpenguins)
```

## Conditional Statement

```{r}
temp <- 98.2

if (temp > 97) {
  print("its real hot, jump in the ocean")
} else
  print("no temperature warning")
```

Create an if else statement for blue whale lengths.

create a variable blue whale, which has a value of 40 meters.

add an if else statement that returns "GIANT" if \>35

medium if 20\<x\<35 or

small if \<=20

```{r}
whale_length <- 26

if (whale_length >35) {
  print("GIANT")
} else if (whale_length >= 20 & whale_length<=35) {
  print("MEDIUM")
} else if (whale_length <= 20) {print("SMALL")}

```

## Switch Statement

```{r}
housing_type <- "single"

switch(housing_type,
       "single" = ("400"),
       "double" = ("750"),
       "whole" = ("1100"))

if (housing_type == "whole") {
  print("1100")
} else if (housing_type == "double") {
  print("750")
}else if (housing_type == "single") {
  print("400")
}
```

## For Loops

```{r}
height <- c(58, 61, 65, 72, 89, 94, 101)

for (i in seq_along(height)) {
  half_height = height[i] / 2
  print(half_height)
}

## for each value in the height vector, return the sum of the value + the one right after it

height <- c(58, 61, 65, 72, 89, 94, 101)

for (i in seq_along(height)) {
  sum_height = height[i]+height[i+1]
  print(sum_height)
}

for (i in seq(1:length(height)-1)) {
  sum_height = height[i]+height[i+1]
  print(sum_height)
}

## write a for loop that calculates the value of height for each element divided by the mean of the entire height vector

height <- c(58, 61, 65, 72, 89, 94, 101)

for (i in seq_along(height)) {
  standardized_ht = height[i]/mean(height)
  print(standardized_ht)
}
```

## For Loop with Conditional Statement

write a for loop with a conditional if statement that returns the means of all numeric variables within the penguins dataset

-   is this numeric (asks is this thing numeric?)

-   mean(vec,na.rm = TRUE)

```{r}
#penguin_means <- vector(mode = "numeric", length = ncol(penguins))


for (i in seq_along(penguins)){
  if (is.numeric(penguins[[i]])) {
  penguins_mean <- mean(penguins[[i]], na.rm = TRUE)
  print(penguins_mean)
}
}

```

## Functional Programming for easier iteration

use apply() to iterate over rows or columns. MARGIN = 1 (rows), MARGIN = 2 (columns)

```{r}
apply(mtcars,2,median)
#apply(X = mtcars, MARGIN = 2, FUN = median)
#finding the median for each column in mtcars
```

### dplyr:: across() example

Starter: find mean flipper length of penguins by species

```{r}
penguins %>% 
  group_by(species,sex) %>% 
  summarize(mean_flipper_length = mean(flipper_length_mm, na.rm = TRUE),
            sd_flipper_length = sd(flipper_length_mm, na.rm = TRUE),
            max_body_mass = max(body_mass_g, na.rm = TRUE))

#use summarize() to tell something what to calculate and return it in a table. Can pull from multiple columns in a dataset and group by different variables [ie. species and gender]
```

```{r}
penguins %>% 
  group_by(species, island) %>% 
  summarize(dplyr::across(.cols = where(is.numeric),mean, na.rm = TRUE))
```

## Detecting a string pattern

```{r}
food <- "I love enchiladas"

str_detect(food, "burritos")

if (str_detect(food, "burritos")){
  print("yay burritos!")
} else {
  print("what about burritos?")
}
```
